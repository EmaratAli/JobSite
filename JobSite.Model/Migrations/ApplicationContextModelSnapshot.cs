// <auto-generated />
using System;
using JobSite.Model.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JobSite.Model.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JobSite.Model.Common.EmploymentStatus", b =>
                {
                    b.Property<int>("EmploymentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmploymentStatusId");

                    b.ToTable("EmploymentStatuses");
                });

            modelBuilder.Entity("JobSite.Model.Common.Gender", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("JobSite.Model.Common.JobCategory", b =>
                {
                    b.Property<int>("JobCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("JobCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobCategoryTypeId")
                        .HasColumnType("int");

                    b.HasKey("JobCategoryId");

                    b.HasIndex("JobCategoryTypeId");

                    b.ToTable("JobCategories");
                });

            modelBuilder.Entity("JobSite.Model.Common.JobCategoryType", b =>
                {
                    b.Property<int>("JobCategoryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("JobCategoryTypeName")
                        .HasColumnType("int");

                    b.HasKey("JobCategoryTypeId");

                    b.ToTable("JobCategoryTypes");
                });

            modelBuilder.Entity("JobSite.Model.Common.JobLevel", b =>
                {
                    b.Property<int>("JobLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("JobLevelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobLevelId");

                    b.ToTable("JobLevel");
                });

            modelBuilder.Entity("JobSite.Model.Common.JobNature", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("JobNature");
                });

            modelBuilder.Entity("JobSite.Model.Common.MaritalStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("MaritalStatus");
                });

            modelBuilder.Entity("JobSite.Model.Common.Nationality", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Nationality");
                });

            modelBuilder.Entity("JobSite.Model.Common.Religion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Religion");
                });

            modelBuilder.Entity("JobSite.Model.Common.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SkillType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("JobSite.Model.Employer.Company_Details.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("ThanaId")
                        .HasColumnType("int");

                    b.HasKey("AddressId");

                    b.HasIndex("CompanyDetailsId");

                    b.HasIndex("ThanaId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("JobSite.Model.Employer.Company_Details.CompanyDetails", b =>
                {
                    b.Property<int>("CompanyDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BusinessDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyDetailsId");

                    b.ToTable("CompanyDetails");
                });

            modelBuilder.Entity("JobSite.Model.Employer.Company_Details.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyDetailsId")
                        .HasColumnType("int");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.HasKey("ContactId");

                    b.HasIndex("CompanyDetailsId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("JobSite.Model.Employer.Company_Details.IndustryType", b =>
                {
                    b.Property<int>("IndustryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IndustryTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IndustryTypeId");

                    b.ToTable("IndustryTypes");
                });

            modelBuilder.Entity("JobSite.Model.Employer.Company_Details.IndustryTypeDetails", b =>
                {
                    b.Property<int>("IndustryTypeDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("IndustryTypeId")
                        .HasColumnType("int");

                    b.HasKey("IndustryTypeDetailsId");

                    b.HasIndex("CompanyDetailsId");

                    b.HasIndex("IndustryTypeId");

                    b.ToTable("IndustryTypeDetails");
                });

            modelBuilder.Entity("JobSite.Model.Employer.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("JobSite.Model.Employer.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("DistrictName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistrictId");

                    b.HasIndex("CountryId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("JobSite.Model.Employer.PostedJob.Degree", b =>
                {
                    b.Property<int>("DegreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DegreeNameId")
                        .HasColumnType("int");

                    b.Property<string>("Major")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequirementId")
                        .HasColumnType("int");

                    b.HasKey("DegreeId");

                    b.HasIndex("DegreeNameId");

                    b.HasIndex("RequirementId");

                    b.ToTable("Degrees");
                });

            modelBuilder.Entity("JobSite.Model.Employer.PostedJob.DegreeLevel", b =>
                {
                    b.Property<int>("DegreeLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DegreeLevelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DegreeLevelId");

                    b.ToTable("DegreeLevels");
                });

            modelBuilder.Entity("JobSite.Model.Employer.PostedJob.DegreeName", b =>
                {
                    b.Property<int>("DegreeNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DegreeLevelId")
                        .HasColumnType("int");

                    b.HasKey("DegreeNameId");

                    b.HasIndex("DegreeLevelId");

                    b.ToTable("DegreeNames");
                });

            modelBuilder.Entity("JobSite.Model.Employer.PostedJob.EmploymentRequiredStatus", b =>
                {
                    b.Property<int>("EmploymentRequiredStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmploymentStatusId")
                        .HasColumnType("int");

                    b.Property<int>("JobInformationId")
                        .HasColumnType("int");

                    b.HasKey("EmploymentRequiredStatusId");

                    b.HasIndex("EmploymentStatusId");

                    b.HasIndex("JobInformationId");

                    b.ToTable("EmploymentRequiredStatuses");
                });

            modelBuilder.Entity("JobSite.Model.Employer.PostedJob.Experience", b =>
                {
                    b.Property<int>("ExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AreaOfBusiness")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaOfExperience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FresherAllowed")
                        .HasColumnType("bit");

                    b.Property<int>("MaximumYears")
                        .HasColumnType("int");

                    b.Property<int>("MinimumYears")
                        .HasColumnType("int");

                    b.Property<int>("RequirementId")
                        .HasColumnType("int");

                    b.HasKey("ExperienceId");

                    b.HasIndex("RequirementId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("JobSite.Model.Employer.PostedJob.FunctionalCategory", b =>
                {
                    b.Property<int>("FunctionalCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FunctionalCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FunctionalCategoryId");

                    b.ToTable("FunctionalCategories");
                });

            modelBuilder.Entity("JobSite.Model.Employer.PostedJob.JobInformation", b =>
                {
                    b.Property<int>("JobInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ApplicationDeadLine")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Bonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CompanyDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("JobCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("JobContext")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobResponsibility")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfVacancy")
                        .HasColumnType("int");

                    b.Property<bool>("Photograph")
                        .HasColumnType("bit");

                    b.Property<int>("RequirementId")
                        .HasColumnType("int");

                    b.Property<string>("ResumeOption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialInstruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobInformationId");

                    b.HasIndex("CompanyDetailsId");

                    b.HasIndex("JobCategoryId");

                    b.HasIndex("RequirementId");

                    b.ToTable("JobInformation");
                });

            modelBuilder.Entity("JobSite.Model.Employer.PostedJob.RequiredGender", b =>
                {
                    b.Property<int>("RequiredGenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<int>("RequiredPersonId")
                        .HasColumnType("int");

                    b.HasKey("RequiredGenderId");

                    b.HasIndex("GenderId");

                    b.HasIndex("RequiredPersonId");

                    b.ToTable("RequiredGenders");
                });

            modelBuilder.Entity("JobSite.Model.Employer.PostedJob.RequiredJobLevel", b =>
                {
                    b.Property<int>("RequiredJobLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("JobInformationId")
                        .HasColumnType("int");

                    b.Property<int>("JobLevelId")
                        .HasColumnType("int");

                    b.HasKey("RequiredJobLevelId");

                    b.HasIndex("JobInformationId");

                    b.HasIndex("JobLevelId");

                    b.ToTable("RequiredJobLevels");
                });

            modelBuilder.Entity("JobSite.Model.Employer.PostedJob.RequiredPerson", b =>
                {
                    b.Property<int>("RequiredPersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GenderID")
                        .HasColumnType("int");

                    b.Property<int>("MaximumAge")
                        .HasColumnType("int");

                    b.Property<int>("MinimumAge")
                        .HasColumnType("int");

                    b.HasKey("RequiredPersonId");

                    b.HasIndex("GenderID");

                    b.ToTable("RequiredPeople");
                });

            modelBuilder.Entity("JobSite.Model.Employer.PostedJob.Requirement", b =>
                {
                    b.Property<int>("RequirementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalRequirements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherEducationalQualification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessionalCertification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequiredPersonId")
                        .HasColumnType("int");

                    b.Property<string>("Training")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequirementId");

                    b.HasIndex("RequiredPersonId");

                    b.ToTable("Requirements");
                });

            modelBuilder.Entity("JobSite.Model.Employer.PostedJob.SkillDetails", b =>
                {
                    b.Property<int>("SkillDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RequirementId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("SkillDetailsId");

                    b.HasIndex("RequirementId");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillDetails");
                });

            modelBuilder.Entity("JobSite.Model.Employer.PostedJob.SpecialSkillCategory", b =>
                {
                    b.Property<int>("SpecialSkillCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SpecialSkillCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecialSkillCategoryId");

                    b.ToTable("SpecialSkillCategories");
                });

            modelBuilder.Entity("JobSite.Model.Employer.Thana", b =>
                {
                    b.Property<int>("ThanaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("ThanaName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ThanaId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Thanas");
                });

            modelBuilder.Entity("JobSite.Model.JobSeeker.CareerInformation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ExpectedSalary")
                        .HasColumnType("MONEY");

                    b.Property<int>("JobLevelId")
                        .HasColumnType("int");

                    b.Property<int>("JobNatureID")
                        .HasColumnType("int");

                    b.Property<string>("Objective")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonalInfoID")
                        .HasColumnType("int");

                    b.Property<decimal>("PresentSalary")
                        .HasColumnType("MONEY");

                    b.HasKey("ID");

                    b.HasIndex("JobLevelId");

                    b.HasIndex("JobNatureID");

                    b.HasIndex("PersonalInfoID")
                        .IsUnique();

                    b.ToTable("CareerInformation");
                });

            modelBuilder.Entity("JobSite.Model.JobSeeker.PersonalInformation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlternateEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("DATE");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenderID")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaritalStatusID")
                        .HasColumnType("int");

                    b.Property<string>("MobileNoOne")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNoThree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNoTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalIdNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationalityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PassportIssueDate")
                        .HasColumnType("date");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermanentAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresentAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReligionID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("GenderID");

                    b.HasIndex("MaritalStatusID");

                    b.HasIndex("NationalityID");

                    b.HasIndex("ReligionID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("PersonalInformation");
                });

            modelBuilder.Entity("JobSite.Model.JobSeeker.PreferredJobAreas", b =>
                {
                    b.Property<int>("PreferredJobAreasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PreferredJobAreaName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PreferredJobAreasId");

                    b.ToTable("PreferredJobAreas");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("JobSite.Model.Common.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("JobSite.Model.Common.JobCategory", b =>
                {
                    b.HasOne("JobSite.Model.Common.JobCategoryType", "JobCategoryType")
                        .WithMany("JobCategories")
                        .HasForeignKey("JobCategoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobSite.Model.Employer.Company_Details.Address", b =>
                {
                    b.HasOne("JobSite.Model.Employer.Company_Details.CompanyDetails", "CompanyDetails")
                        .WithMany("Addresses")
                        .HasForeignKey("CompanyDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSite.Model.Employer.Thana", "Thana")
                        .WithMany("Addresses")
                        .HasForeignKey("ThanaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobSite.Model.Employer.Company_Details.Contact", b =>
                {
                    b.HasOne("JobSite.Model.Employer.Company_Details.CompanyDetails", "CompanyDetails")
                        .WithMany("Contacts")
                        .HasForeignKey("CompanyDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobSite.Model.Employer.Company_Details.IndustryTypeDetails", b =>
                {
                    b.HasOne("JobSite.Model.Employer.Company_Details.CompanyDetails", "CompanyDetails")
                        .WithMany("IndustryTypeDetails")
                        .HasForeignKey("CompanyDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSite.Model.Employer.Company_Details.IndustryType", "IndustryType")
                        .WithMany()
                        .HasForeignKey("IndustryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobSite.Model.Employer.District", b =>
                {
                    b.HasOne("JobSite.Model.Employer.Country", "Country")
                        .WithMany("Districts")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobSite.Model.Employer.PostedJob.Degree", b =>
                {
                    b.HasOne("JobSite.Model.Employer.PostedJob.DegreeName", "DegreeName")
                        .WithMany("Degrees")
                        .HasForeignKey("DegreeNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSite.Model.Employer.PostedJob.Requirement", "Requirement")
                        .WithMany("Degrees")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobSite.Model.Employer.PostedJob.DegreeName", b =>
                {
                    b.HasOne("JobSite.Model.Employer.PostedJob.DegreeLevel", "DegreeLevel")
                        .WithMany("DegreeNames")
                        .HasForeignKey("DegreeLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobSite.Model.Employer.PostedJob.EmploymentRequiredStatus", b =>
                {
                    b.HasOne("JobSite.Model.Common.EmploymentStatus", "EmploymentStatus")
                        .WithMany("EmploymentRequiredStatuses")
                        .HasForeignKey("EmploymentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSite.Model.Employer.PostedJob.JobInformation", "JobInformation")
                        .WithMany("EmploymentRequiredStatuses")
                        .HasForeignKey("JobInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobSite.Model.Employer.PostedJob.Experience", b =>
                {
                    b.HasOne("JobSite.Model.Employer.PostedJob.Requirement", "Requirement")
                        .WithMany("Experiences")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobSite.Model.Employer.PostedJob.JobInformation", b =>
                {
                    b.HasOne("JobSite.Model.Employer.Company_Details.CompanyDetails", "CompanyDetails")
                        .WithMany("JobInformation")
                        .HasForeignKey("CompanyDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSite.Model.Common.JobCategory", "JobCategory")
                        .WithMany("JobInformation")
                        .HasForeignKey("JobCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSite.Model.Employer.PostedJob.Requirement", "Requirement")
                        .WithMany("JobInformation")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobSite.Model.Employer.PostedJob.RequiredGender", b =>
                {
                    b.HasOne("JobSite.Model.Common.Gender", "Gender")
                        .WithMany("RequiredGenders")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSite.Model.Employer.PostedJob.RequiredPerson", "RequiredPerson")
                        .WithMany("RequiredGenders")
                        .HasForeignKey("RequiredPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobSite.Model.Employer.PostedJob.RequiredJobLevel", b =>
                {
                    b.HasOne("JobSite.Model.Employer.PostedJob.JobInformation", "JobInformation")
                        .WithMany("RequiredJobLevels")
                        .HasForeignKey("JobInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSite.Model.Common.JobLevel", "JobLevel")
                        .WithMany("RequiredJobLevels")
                        .HasForeignKey("JobLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobSite.Model.Employer.PostedJob.RequiredPerson", b =>
                {
                    b.HasOne("JobSite.Model.Common.Gender", "Gender")
                        .WithMany("RequiredPeople")
                        .HasForeignKey("GenderID");
                });

            modelBuilder.Entity("JobSite.Model.Employer.PostedJob.Requirement", b =>
                {
                    b.HasOne("JobSite.Model.Employer.PostedJob.RequiredPerson", "RequiredPerson")
                        .WithMany("Requirements")
                        .HasForeignKey("RequiredPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobSite.Model.Employer.PostedJob.SkillDetails", b =>
                {
                    b.HasOne("JobSite.Model.Employer.PostedJob.Requirement", "Requirement")
                        .WithMany("SkillDetails")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSite.Model.Common.Skill", "Skill")
                        .WithMany("SkillDetails")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobSite.Model.Employer.Thana", b =>
                {
                    b.HasOne("JobSite.Model.Employer.District", "District")
                        .WithMany("Thanas")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobSite.Model.JobSeeker.CareerInformation", b =>
                {
                    b.HasOne("JobSite.Model.Common.JobLevel", "JobLevel")
                        .WithMany("CareerInformations")
                        .HasForeignKey("JobLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSite.Model.Common.JobNature", "JobNature")
                        .WithMany("CareerInformations")
                        .HasForeignKey("JobNatureID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSite.Model.JobSeeker.PersonalInformation", "PersonalInformation")
                        .WithOne("CareerInformation")
                        .HasForeignKey("JobSite.Model.JobSeeker.CareerInformation", "PersonalInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobSite.Model.JobSeeker.PersonalInformation", b =>
                {
                    b.HasOne("JobSite.Model.Common.Gender", "Gender")
                        .WithMany("PersonalInformations")
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSite.Model.Common.MaritalStatus", "MaritalStatus")
                        .WithMany("PersonalInformations")
                        .HasForeignKey("MaritalStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSite.Model.Common.Nationality", "Nationality")
                        .WithMany("PersonalInformations")
                        .HasForeignKey("NationalityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSite.Model.Common.Religion", "Religion")
                        .WithMany("PersonalInformations")
                        .HasForeignKey("ReligionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSite.Model.Common.ApplicationUser", "ApplicationUser")
                        .WithOne("PersonalInformation")
                        .HasForeignKey("JobSite.Model.JobSeeker.PersonalInformation", "UserID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
